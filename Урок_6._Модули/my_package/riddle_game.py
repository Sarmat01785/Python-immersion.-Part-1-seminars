"""
Задание №4
Создайте модуль с функцией внутри.
Функция получает на вход загадку, список с возможными
вариантами отгадок и количество попыток на угадывание.
Программа возвращает номер попытки, с которой была
отгадана загадка или ноль, если попытки исчерпаны.
"""

# riddle_game.py


# def guess_riddle(riddle, possible_answers, max_attempts):
#     """
#     Функция для отгадывания загадки из списка возможных ответов.

#     :param riddle: Текст загадки.
#     :param possible_answers: Список с возможными вариантами ответов.
#     :param max_attempts: Количество попыток на угадывание.
#     :return: Номер попытки, с которой был угадан ответ, или 0, если попытки исчерпаны.
#     """
#     print(riddle)
#     for attempt in range(1, max_attempts + 1):
#         guess = input(f"Попытка {attempt}. Ваш ответ: ")
#         if guess in possible_answers:
#             print(f"Правильно! Ответ угадан с {attempt}-й попытки.")
#             return attempt
#     print("Попытки исчерпаны. К сожалению, вы не угадали.")
#     return 0


# # Если модуль запущен как скрипт, запросить ввод загадки и параметров игры
# if __name__ == "__main__":
#     # Ввод данных пользователем можно запросить прямо здесь или использовать аргументы командной строки
#     riddle_input = "Что может в одно и то же время стоять и ходить?"
#     possible_answers_input = ["часы", "Часы", "ЧАСЫ"]
#     max_attempts_input = 3

#     # Вызов функции для игры в загадки
#     guess_riddle(riddle_input, possible_answers_input, max_attempts_input)


# """
# Задание №5
# Добавьте в модуль с загадками функцию, которая хранит
# словарь списков.
# Ключ словаря - загадка, значение - список с отгадками.
# Функция в цикле вызывает загадывающую функцию, чтобы
# передать ей все свои загадки.
# """

# # riddle_game.py
# def guess_riddle(riddle, possible_answers, max_attempts):
#     """
#     Функция для отгадывания загадки из списка возможных ответов.

#     :param riddle: Текст загадки.
#     :param possible_answers: Список с возможными вариантами ответов.
#     :param max_attempts: Количество попыток на угадывание.
#     :return: Номер попытки, с которой был угадан ответ, или 0, если попытки исчерпаны.
#     """
#     print(riddle)
#     for attempt in range(1, max_attempts + 1):
#         guess = input(f"Попытка {attempt}. Ваш ответ: ")
#         if guess in possible_answers:
#             print(f"Правильно! Ответ угадан с {attempt}-й попытки.")
#             return attempt
#     print("Попытки исчерпаны. К сожалению, вы не угадали.")
#     return 0


# def play_riddle_game(attempts_per_riddle=3):
#     """
#     Функция выполняет игру в загадки, используя словарь загадок и списков с ответами.
#     В цикле вызывает функцию guess_riddle для каждой загадки из словаря.

#     :param attempts_per_riddle: Количество попыток для каждой загадки.
#     """
#     # Словарь с загадками и списками ответов
#     riddles_and_answers = {
#         "Что всегда увеличивается и никогда не уменьшается?": ["возраст", "время"],
#         "Что может в одно и то же время стоять и ходить?": ["часы", "Часы", "ЧАСЫ"],
#     }

#     # Перебираем все загадки и их ответы
#     for riddle, answers in riddles_and_answers.items():
#         # Вызываем функцию угадывания для каждой загадки
#         if not guess_riddle(riddle, answers, attempts_per_riddle):
#             print("Загадка не отгадана.\n")
#         else:
#             print("Переход к следующей загадке...\n")


# # Если модуль запущен как скрипт, начать игру в загадки
# if __name__ == "__main__":
#     play_riddle_game()


"""Задание №6
Добавьте в модуль с загадками функцию, которая
принимает на вход строку (текст загадки) и число (номер
попытки, с которой она угадана).
Функция формирует словарь с информацией о результатах
отгадывания.
Для хранения используйте защищённый словарь уровня
модуля.
Отдельно напишите функцию, которая выводит результаты
угадывания из защищённого словаря в удобном для чтения
виде.
Для формирования результатов используйте генераторное
выражение."""


# riddle_game.py
import random

__all__ = ["guess_riddle","display_riddle_results", "play_riddle_game"]

# Защищенный словарь уровня модуля для хранения результатов отгадывания
_results = {}


def guess_riddle(riddle, answers, attempts):
    """
    Функция запрашивает ответ на загадку у пользователя и возвращает номер попытки,
    с которой была отгадана загадка, или 0, если попытки исчерпаны.
    """
    print(riddle)
    for attempt in range(1, attempts + 1):
        user_answer = input(f"Попытка {attempt}. Ваш ответ: ")
        if user_answer.lower() in [answer.lower() for answer in answers]:
            print("Правильно! Загадка отгадана.")
            return attempt
    print("Все попытки исчерпаны.")
    return 0


def record_riddle_result(riddle, attempt):
    """
    Функция записывает результат отгадывания загадки в защищенный словарь.
    """
    _results[riddle] = attempt


def display_riddle_results():
    """
    Функция выводит результаты отгадывания загадок из защищенного словаря в удобном для чтения виде.
    """
    print("\nРезультаты угадывания загадок:")
    for riddle, attempt in _results.items():
        if attempt > 0:
            print(f"'{riddle}': угадана с {attempt}-й попытки")
        else:
            print(f"'{riddle}': не угадана")


def play_riddle_game():
    """
    Функция выполняет игру в загадки, используя словарь загадок и списков с ответами.
    """
    riddles_and_answers = {
        "Что всегда увеличивается и никогда не уменьшается?": ["возраст"],
        "Что может в одно и то же время стоять и ходить?": ["часы"],
        # Добавьте здесь больше загадок и ответов по желанию
    }

    for riddle, answers in riddles_and_answers.items():
        attempt = guess_riddle(
            riddle, answers, 3
        )  # Предполагаем, что у пользователя 3 попытки на каждую загадку
        record_riddle_result(riddle, attempt)

    display_riddle_results()


# Если модуль запущен как скрипт, начать игру в загадки
if __name__ == "__main__":
    play_riddle_game()
