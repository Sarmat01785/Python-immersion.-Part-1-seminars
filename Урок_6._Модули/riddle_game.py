"""
Задание №4
Создайте модуль с функцией внутри.
Функция получает на вход загадку, список с возможными
вариантами отгадок и количество попыток на угадывание.
Программа возвращает номер попытки, с которой была
отгадана загадка или ноль, если попытки исчерпаны.
"""

# riddle_game.py


# def guess_riddle(riddle, possible_answers, max_attempts):
#     """
#     Функция для отгадывания загадки из списка возможных ответов.

#     :param riddle: Текст загадки.
#     :param possible_answers: Список с возможными вариантами ответов.
#     :param max_attempts: Количество попыток на угадывание.
#     :return: Номер попытки, с которой был угадан ответ, или 0, если попытки исчерпаны.
#     """
#     print(riddle)
#     for attempt in range(1, max_attempts + 1):
#         guess = input(f"Попытка {attempt}. Ваш ответ: ")
#         if guess in possible_answers:
#             print(f"Правильно! Ответ угадан с {attempt}-й попытки.")
#             return attempt
#     print("Попытки исчерпаны. К сожалению, вы не угадали.")
#     return 0


# # Если модуль запущен как скрипт, запросить ввод загадки и параметров игры
# if __name__ == "__main__":
#     # Ввод данных пользователем можно запросить прямо здесь или использовать аргументы командной строки
#     riddle_input = "Что может в одно и то же время стоять и ходить?"
#     possible_answers_input = ["часы", "Часы", "ЧАСЫ"]
#     max_attempts_input = 3

#     # Вызов функции для игры в загадки
#     guess_riddle(riddle_input, possible_answers_input, max_attempts_input)


"""
Задание №5
Добавьте в модуль с загадками функцию, которая хранит
словарь списков.
Ключ словаря - загадка, значение - список с отгадками.
Функция в цикле вызывает загадывающую функцию, чтобы
передать ей все свои загадки.
"""

# riddle_game.py
def guess_riddle(riddle, possible_answers, max_attempts):
    """
    Функция для отгадывания загадки из списка возможных ответов.

    :param riddle: Текст загадки.
    :param possible_answers: Список с возможными вариантами ответов.
    :param max_attempts: Количество попыток на угадывание.
    :return: Номер попытки, с которой был угадан ответ, или 0, если попытки исчерпаны.
    """
    print(riddle)
    for attempt in range(1, max_attempts + 1):
        guess = input(f"Попытка {attempt}. Ваш ответ: ")
        if guess in possible_answers:
            print(f"Правильно! Ответ угадан с {attempt}-й попытки.")
            return attempt
    print("Попытки исчерпаны. К сожалению, вы не угадали.")
    return 0


def play_riddle_game(attempts_per_riddle=3):
    """
    Функция выполняет игру в загадки, используя словарь загадок и списков с ответами.
    В цикле вызывает функцию guess_riddle для каждой загадки из словаря.

    :param attempts_per_riddle: Количество попыток для каждой загадки.
    """
    # Словарь с загадками и списками ответов
    riddles_and_answers = {
        "Что всегда увеличивается и никогда не уменьшается?": ["возраст", "время"],
        "Что может в одно и то же время стоять и ходить?": ["часы", "Часы", "ЧАСЫ"],
    }

    # Перебираем все загадки и их ответы
    for riddle, answers in riddles_and_answers.items():
        # Вызываем функцию угадывания для каждой загадки
        if not guess_riddle(riddle, answers, attempts_per_riddle):
            print("Загадка не отгадана.\n")
        else:
            print("Переход к следующей загадке...\n")


# Если модуль запущен как скрипт, начать игру в загадки
if __name__ == "__main__":
    play_riddle_game()
